diff --git a/src/AppBundle/Entity/Enclosure.php b/src/AppBundle/Entity/Enclosure.php
index 11bd5c6..de2ea83 100644
--- a/src/AppBundle/Entity/Enclosure.php
+++ b/src/AppBundle/Entity/Enclosure.php
@@ -2,6 +2,7 @@
 
 namespace AppBundle\Entity;
 
+use AppBundle\Exception\DinosaursAreRunningRampantException;
 use AppBundle\Exception\NotABuffetException;
 use Doctrine\Common\Collections\ArrayCollection;
 use Doctrine\ORM\Mapping as ORM;
@@ -18,9 +19,16 @@ class Enclosure
      */
     private $dinosaurs;
 
+    /**
+     * @var iterable
+     * @ORM\OneToMany(targetEntity="AppBundle\Entity\Security", mappedBy="enclosure", cascade={"persist"})
+     */
+    private $securities;
+
     public function __construct()
     {
         $this->dinosaurs = new ArrayCollection();
+        $this->securities = new ArrayCollection();
     }
 
     public function getDinosaurs(): iterable
@@ -30,6 +38,10 @@ class Enclosure
 
     public function addDinosaur(Dinosaur $dinosaur)
     {
+        if (!$this->getIsSecurityActive()) {
+            throw new DinosaursAreRunningRampantException('Are you craaazy?!?');
+        }
+
         if (!$this->canAddDinosaur($dinosaur)) {
             throw new NotABuffetException();
         }
@@ -42,4 +54,15 @@ class Enclosure
         return count($this->dinosaurs) === 0
             || $this->dinosaurs->first()->sameDietAs($dinosaur);
     }
+
+    public function getIsSecurityActive(): bool
+    {
+        foreach ($this->securities as $security) {
+            if ($security->getIsActive()) {
+                return true;
+            }
+        }
+
+        return false;
+    }
 }
diff --git a/src/AppBundle/Entity/Security.php b/src/AppBundle/Entity/Security.php
new file mode 100644
index 0000000..894f57c
--- /dev/null
+++ b/src/AppBundle/Entity/Security.php
@@ -0,0 +1,46 @@
+<?php
+
+namespace AppBundle\Entity;
+
+use Doctrine\ORM\Mapping as ORM;
+
+/**
+ * @ORM\Entity
+ * @ORM\Table(name="securities")
+ */
+class Security
+{
+    /**
+     * @ORM\Id
+     * @ORM\GeneratedValue(strategy="AUTO")
+     * @ORM\Column(type="integer")
+     */
+    private $id;
+
+    /**
+     * @ORM\Column(type="string")
+     */
+    private $name;
+
+    /**
+     * @ORM\Column(type="boolean")
+     */
+    private $isActive;
+
+    /**
+     * @ORM\ManyToOne(targetEntity="AppBundle\Entity\Enclosure", inversedBy="securities")
+     */
+    private $enclosure;
+
+    public function __construct(string $name, bool $isActive, Enclosure $enclosure)
+    {
+        $this->name = $name;
+        $this->isActive = $isActive;
+        $this->enclosure = $enclosure;
+    }
+
+    public function getIsActive(): bool
+    {
+        return $this->isActive;
+    }
+}
